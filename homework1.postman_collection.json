{
	"info": {
		"_postman_id": "a5b1f6c6-d9c1-4c3e-9b93-3a8b6d12cd6f",
		"name": "homework1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(jsonData.name).to.deep.eql(\"alexandr\");\r",
							"});\r",
							"// // Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.deep.eql(\"26\");\r",
							"});\r",
							"// // Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.deep.eql(10);\r",
							"});\r",
							"// // Спарсить request\r",
							"let req = (request.data);\r",
							"\r",
							"console.log (req)\r",
							"let salary_11 = req.salary * 1\r",
							"\r",
							"let salary_10 = salary_11 * 4\r",
							"\r",
							"\r",
							"// // Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test request name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"// // Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test request age\", function () {\r",
							"    pm.expect(jsonData.age).to.deep.eql(req.age);\r",
							"});\r",
							"// // Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test request salary\", function () {\r",
							"pm.expect(jsonData.salary).to.equal(parseInt(req.salary))\r",
							"})\r",
							"\r",
							"pm.test(\"Your test request salary1\", function () {\r",
							"pm.expect(jsonData.salary).to.equal(salary_11)\r",
							"})\r",
							"// // Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"// // Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_12 = jsonData.family.u_salary_1_5_year\r",
							"console.log (salary_12)\r",
							"\r",
							"pm.test(\"Your test request salary\", function () {\r",
							"pm.expect(salary_12).to.equal(parseInt(salary_10))\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "alexandr",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "10",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"console.log (jsonData.salary)\r",
							"// // Спарсить request\r",
							"// let req = pm.request.url.getQueryString()\r",
							"let req = pm.request.url.query.toObject()\r",
							"console.log (req)\r",
							"console.log (req.name)\r",
							"console.log (req.salary)\r",
							"// // Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test request name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"// // Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test request age\", function () {\r",
							"    pm.expect(jsonData.age).to.deep.eql(req.age);\r",
							"});\r",
							"// // Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test request salary\", function () {\r",
							"pm.expect(jsonData.salary).to.equal(parseInt(req.salary))\r",
							"})\r",
							"pm.test(\"Your test request salary\", function () {\r",
							"pm.expect(jsonData.salary).to.equal(+(req.salary))\r",
							"})\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"Your test  name dog\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"})\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Your test  age dog\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"})\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"Your test request name(luky)\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.name).to.deep.include(\"Luky\")\r",
							"})\r",
							"//  Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Your test request age(luky)\", function () {\r",
							"pm.expect(String(jsonData.family.pets.dog.age)).to.deep.include(\"4\")\r",
							"})\r",
							"\r",
							"console.log(jsonData.family.pets.dog)\r",
							"\r",
							"// pm.test(\"Your test request salary1\", function () {\r",
							"// pm.expect(jsonData.salary).to.equal(salary_11)\r",
							"// })\r",
							"\r",
							"// // Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"// let salary_12 = jsonData.family.u_salary_1_5_year\r",
							"// console.log (salary_12)\r",
							"\r",
							"// pm.test(\"Your test request salary\", function () {\r",
							"// pm.expect(salary_12).to.equal(parseInt(salary_10))\r",
							"// })\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=alexandr&age=26&salary=10",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "alexandr"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"\r",
							"// Спарсить request\r",
							"let req = pm.request.url.query.toObject()\r",
							"console.log (req)\r",
							"console.log (req.name)\r",
							"\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test request name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test request age\", function () {\r",
							"    pm.expect(jsonData.age).to.deep.eql(+(req.age));\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log (req.salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log (jsonData.salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log (jsonData.salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary из response\r",
							"console.log (jsonData.salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log (jsonData.salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Your test request salary\", function () {\r",
							"pm.expect(jsonData.salary[0]).to.equal(parseInt(req.salary))\r",
							"})\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Your test request salary\", function () {\r",
							"pm.expect((+jsonData.salary[1])).to.equal(req.salary * 2)\r",
							"})\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Your test request salary\", function () {\r",
							"pm.expect((+jsonData.salary[2])).to.equal(req.salary * 3)\r",
							"})\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"pm.test(\"Your environment name\", function () {\r",
							"pm.environment.set(\"name\", \"alexandr\");\r",
							"})\r",
							"\r",
							"// Создать в окружении переменную age\r",
							"pm.test(\"Your environment age\", function () {\r",
							"pm.environment.set(\"age\", 26);\r",
							"})\r",
							"\r",
							"// Создать в окружении переменную salary\r",
							"pm.test(\"Your environment salary\", function () {\r",
							"pm.environment.set(\"salary\", 10);\r",
							"\r",
							"})\r",
							"\r",
							"\r",
							"for (let i=0; i<jsonData.salary.length; i++){\r",
							"    console.log(jsonData.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=alexandr&age=26&salary=10",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "alexandr"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"console.log (jsonData)\r",
							"\r",
							"// Спарсить request\r",
							"let req = (request.data)\r",
							"// console.log (req)\r",
							"// console.log (req.name)\r",
							"\r",
							"\r",
							"pm.test(\"Your test  paraments start_qa_salary\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Your test  paraments qa_salary_after_6_months\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Your test  paraments qa_salary_after_12_months\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Your test  paraments qa_salary_after_1.5_year\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Your test  paraments qa_salary_after_3.5_years\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"\r",
							"pm.test(\"Your test  paraments person\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"person\")\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Your test request salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+(req.salary));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Your test request qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+(req.salary * 2));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Your test request qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+(req.salary * 2.7));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Your test request qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+(req.salary * 3.3));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Your test request qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req.salary * 3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Your test request u_name[1] = salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+(req.salary));\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Your test request u_age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+(req.age));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Your test request u_age\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+(req.salary * 4.2));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}